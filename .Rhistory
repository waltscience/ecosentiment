dat$P <- as.factor(dat$P)
b <- ggplot(dat, aes(factor(P), diversity, fill = P)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
scale_fill_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
labs(y = expression(Species ~ diversity),
x = "P level") +
scale_x_discrete(labels = c("Ambient P","P fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot diversity ~ ai:p
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
AI_P <- AI + (intervals(bestmod)$fixed["AI:P", "upper"] - intervals(bestmod)$fixed["AI:P", "est."])
newdat
intervals(bestmod)
# plot diversity ~ ai:p
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
AI_P <- AI + (intervals(bestmod)$fixed["P:AI", "upper"] - intervals(bestmod)$fixed["P:AI", "est."])
newdat$upAI <- exp(newdat$fit + AI)
newdat$lwAI <- exp(newdat$fit - AI)
newdat$upAI_P <- exp(newdat$fit + AI_P)
newdat$lwAI_P <- exp(newdat$fit - AI_P)
newdat$fit <- exp(newdat$fit)
newdat <- newdat[order(newdat$P), ]
p0 <- lm(fit ~ AI, data = newdat[1:8,])$coefficients
p0u <- lm(upAI ~ AI, data = newdat[1:8,])$coefficients
p0l <- lm(lwAI ~ AI, data = newdat[1:8,])$coefficients
p1 <- lm(fit ~ AI, data = newdat[9:16,])$coefficients
p1u <- lm(upAI_P ~ AI, data = newdat[9:16,])$coefficients
p1l <- lm(lwAI_P ~ AI, data = newdat[9:16,])$coefficients
s <- ggplot(dat, aes(x = AI, y = diversity, colour = factor(P))) +
geom_point(size = 2, alpha = 0.65) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 0.5, intercept = p0l[1], slope = p0l[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p0u[1], slope = p0u[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
geom_abline(size = 0.5, intercept = p1l[1], slope = p1l[2], color = "firebrick 3", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p1u[1], slope = p1u[2], color = "firebrick 3", linetype = "dashed") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ richness), x = "Aridity index")
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
s <- ggplot(dat, aes(x = AI, y = diversity, colour = factor(P))) +
geom_point(size = 2, alpha = 0.65) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 0.5, intercept = p0l[1], slope = p0l[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p0u[1], slope = p0u[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
geom_abline(size = 0.5, intercept = p1l[1], slope = p1l[2], color = "firebrick 3", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p1u[1], slope = p1u[2], color = "firebrick 3", linetype = "dashed") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ richness), x = "Aridity index")
# set response variable
rv <- "diversity"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# plot diversity ~ P
colorder <- c( "grey48", "firebrick 3")
dat$P <- as.factor(dat$P)
b <- ggplot(dat, aes(factor(P), diversity, fill = P)) +
geom_boxplot(color = "black") +
scale_color_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
scale_fill_manual(values = c( "grey48", "firebrick 3"),
labels = c("Ambient P","P fertilized"),
name ="P level") +
labs(y = expression(Species ~ diversity),
x = "P level") +
scale_x_discrete(labels = c("Ambient P","P fertilized"))
b + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# plot diversity ~ ai:p
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
AI_P <- AI + (intervals(bestmod)$fixed["P:AI", "upper"] - intervals(bestmod)$fixed["P:AI", "est."])
newdat$upAI <- exp(newdat$fit + AI)
newdat$lwAI <- exp(newdat$fit - AI)
newdat$upAI_P <- exp(newdat$fit + AI_P)
newdat$lwAI_P <- exp(newdat$fit - AI_P)
newdat$fit <- exp(newdat$fit)
newdat <- newdat[order(newdat$P), ]
newdat
p0 <- lm(fit ~ AI, data = newdat[1:8,])$coefficients
p0u <- lm(upAI ~ AI, data = newdat[1:8,])$coefficients
p0l <- lm(lwAI ~ AI, data = newdat[1:8,])$coefficients
p1 <- lm(fit ~ AI, data = newdat[9:16,])$coefficients
p1u <- lm(upAI_P ~ AI, data = newdat[9:16,])$coefficients
p1l <- lm(lwAI_P ~ AI, data = newdat[9:16,])$coefficients
ggplot(dat, aes(x = AI, y = diversity, colour = factor(P))) +
geom_point(size = 2, alpha = 0.65) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 0.5, intercept = p0l[1], slope = p0l[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p0u[1], slope = p0u[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
geom_abline(size = 0.5, intercept = p1l[1], slope = p1l[2], color = "firebrick 3", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p1u[1], slope = p1u[2], color = "firebrick 3", linetype = "dashed")
ggplot(dat, aes(x = AI, y = diversity, colour = factor(P))) +
geom_point(size = 2, alpha = 0.65) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 0.5, intercept = p0l[1], slope = p0l[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p0u[1], slope = p0u[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
geom_abline(size = 0.5, intercept = p1l[1], slope = p1l[2], color = "firebrick 3", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p1u[1], slope = p1u[2], color = "firebrick 3", linetype = "dashed") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level")
# plot diversity ~ ai:p
newdat <- expand.grid(
P = unique(dat$P),
AI = c(min(dat$AI), max(dat$AI)),
N_Dep = c(min(dat$N_Dep), max(dat$N_Dep)),
N = unique(dat$N)
)
newdat$fit <- predict(bestmod, level = 0, newdata = newdat)
AI <- (intervals(bestmod)$fixed["AI", "upper"] - intervals(bestmod)$fixed["AI", "est."])
AI_P <- AI + (intervals(bestmod)$fixed["P:AI", "upper"] - intervals(bestmod)$fixed["P:AI", "est."])
newdat$upAI <- newdat$fit + AI
newdat$lwAI <- newdat$fit - AI
newdat$upAI_P <- newdat$fit + AI_P
newdat$lwAI_P <- newdat$fit - AI_P
newdat <- newdat[order(newdat$P), ]
p0 <- lm(fit ~ AI, data = newdat[1:8,])$coefficients
p0u <- lm(upAI ~ AI, data = newdat[1:8,])$coefficients
p0l <- lm(lwAI ~ AI, data = newdat[1:8,])$coefficients
p1 <- lm(fit ~ AI, data = newdat[9:16,])$coefficients
p1u <- lm(upAI_P ~ AI, data = newdat[9:16,])$coefficients
p1l <- lm(lwAI_P ~ AI, data = newdat[9:16,])$coefficients
s <- ggplot(dat, aes(x = AI, y = diversity, colour = factor(P))) +
geom_point(size = 2, alpha = 0.65) +
scale_color_manual(values = c("grey38", "firebrick 3")) +
geom_abline(size = 1.5, intercept = p0[1], slope = p0[2], color = "grey38") +
geom_abline(size = 0.5, intercept = p0l[1], slope = p0l[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p0u[1], slope = p0u[2], color = "grey38", linetype = "dashed") +
geom_abline(size = 1.5, intercept = p1[1], slope = p1[2], color = "firebrick 3") +
geom_abline(size = 0.5, intercept = p1l[1], slope = p1l[2], color = "firebrick 3", linetype = "dashed") +
geom_abline(size = 0.5, intercept = p1u[1], slope = p1u[2], color = "firebrick 3", linetype = "dashed") +
scale_color_manual(values = c("grey38", "firebrick 3"),
labels= c("Ambient P","P fertilized"),
name="P level") +
labs(y = expression(Species ~ diversity), x = "Aridity index")
s + theme_few() + theme(legend.position = c(0.9, 0.87),
legend.background = element_rect(fill = "grey95"),
legend.key = element_rect(fill = "grey95", color = NA))
# set response variable
rv <- "diversity"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# set response variable
rv <- "evenness"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# load packages and data
packages <- c("MuMIn", "nlme", "lme4", "car", "ggplot2", "sjmisc", "sjPlot", "ggthemes")
lapply(packages, library, character.only = TRUE)
alldata <- read.csv("allanalysisdata.csv", header = TRUE)
outpath = "/Users/chriswalter/Dropbox/Chris/Work/Projects/NutNet_BNPP/Paper/modelresults/"
# set response variable
rv <- "ln_evenness"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# set response variable
rv <- "evenness"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
hist(dat$evenness)
# load packages and data
packages <- c("MuMIn", "nlme", "lme4", "car", "ggplot2", "sjmisc", "sjPlot", "ggthemes")
lapply(packages, library, character.only = TRUE)
alldata <- read.csv("allanalysisdata.csv", header = TRUE)
outpath = "/Users/chriswalter/Dropbox/Chris/Work/Projects/NutNet_BNPP/Paper/modelresults/"
# set response variable
rv <- "evenness_sq"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# load packages and data
packages <- c("MuMIn", "nlme", "lme4", "car", "ggplot2", "sjmisc", "sjPlot", "ggthemes")
lapply(packages, library, character.only = TRUE)
alldata <- read.csv("allanalysisdata.csv", header = TRUE)
outpath = "/Users/chriswalter/Dropbox/Chris/Work/Projects/NutNet_BNPP/Paper/modelresults/"
# set response variable
rv <- "evenness_cu"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
# set response variable
rv <- "evenness_sq"
# select data with complete cases of response variable
dat <- alldata[complete.cases(alldata[ , paste(rv)]),]
respname <- paste(rv)
respdat <-  dat[, rv]
# create global model, dredge it, plot cumulative Akaike weights
# and create a model with coefficient avg's from models with AIC delta < 2
mod <- lme(respdat ~ N + P + N_Dep + AI + N:P + N:N_Dep + N:AI + P:N_Dep + P:AI,
random = ~ 1 | site_name/uniqblk, data = dat, method = "ML")
modfit1 <- dredge(mod, fixed=c("N","P"), extra = c("R^2", F = function(x)
summary(x)$fstatistic[[1]]))
plot(modfit1, labAsExpr = TRUE)
av <- model.avg(modfit1, subset = delta < 2)
mfilnam <- paste(outpath, respname, "_modelavtable.csv", sep = "")
write.csv(av[2], mfilnam)
# get variables in best fit model, create a best model, plot and write results
vrs <- data.frame("nam" = as.character("name"))
vrs$nam <- capture.output(cat(names(coefficients(av)[-1]), sep = " + "))
vrs$nam <- paste(vrs$nam, ", random = ~ 1 | site_num/uniqblk, data = dat, method='ML'", sep = "")
bestmod <- eval(parse(text = paste("lme(respdat ~ ", vrs$nam, ")")))
summary(bestmod)
coef(summary(bestmod))
r.squaredGLMM(bestmod)
ptable <- cbind(coef(summary(bestmod)), Anova(bestmod, type = "III"), r.squaredGLMM(bestmod))
pfilnam <- paste(outpath, respname, "_ptable.csv", sep = "")
write.csv(ptable, pfilnam)
# test model residuals and add model predictions to dataframe
Reziduals <- residuals(bestmod)
hist(Reziduals)
shapiro.test(Reziduals)
dat$fit <- predict(bestmod)
{qqnorm(Reziduals, pch = 1)
qqline(Reziduals, col = "red", lwd = 2)}
packages <- c("readr", "tidytext", "textdata", "dplyr", "tidyr", "ggplot2") # packages to load
lapply(packages, library, character.only = TRUE)                         # load packages
afinn <- as.data.frame(get_sentiments(lexicon = "afinn"))                # load sentiment dictionary
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/ecosentiment/master/threads.csv"))) # load data
packages <- c("readr", "tidytext", "textdata", "dplyr", "tidyr", "ggplot2") # packages to load
lapply(packages, library, character.only = TRUE)                         # load packages
afinn <- as.data.frame(get_sentiments(lexicon = "afinn"))                # load sentiment dictionary
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/ecosentiment/master/threads.csv"))) # load data
sentdata <- data.frame(                                                  # initialize the final data frame
"Thread"    = as.numeric(),
"Sentiment" = as.numeric(),
"Type"      = as.character(),
"Year"      = as.numeric()
)
packages <- c("readr", "tidytext", "textdata", "dplyr", "tidyr", "ggplot2") # packages to load
lapply(packages, library, character.only = TRUE)                         # load packages
afinn <- as.data.frame(get_sentiments(lexicon = "afinn"))                # load sentiment dictionary
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/ecosentiment/master/threads.csv"))) # load data
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/ecosentiment/master/threads.csv"))) # load data
packages <- c("readr", "tidytext", "textdata", "dplyr", "tidyr", "ggplot2") # packages to load
lapply(packages, library, character.only = TRUE)                         # load packages
afinn <- as.data.frame(get_sentiments(lexicon = "afinn"))                # load sentiment dictionary
dat <- as.data.frame(read_csv(url("https://raw.githubusercontent.com/waltscience/ecosentiment/master/threads.csv"))) # load data
sentdata <- data.frame(                                                  # initialize the final data frame
"Thread"    = as.numeric(),
"Sentiment" = as.numeric(),
"Type"      = as.character(),
"Year"      = as.numeric()
)
for (i in 1:ncol(dat)) {                                                 # loop to compute sentiment by column
d <- na.omit(dat[, i])                                                 # select data column
d <- tibble(thread = 1:length(d), text = as.character(d))              # create a character tibble
d %>% unnest_tokens(word, text) -> d                                   # convert strings to words
d <- as.data.frame(d)                                                  # convert to data frame for merge
words <- merge(d, afinn, by = "word")                                  # merge words with dictionary
words %>% count(thread, value) -> words                                # count words by sentiment
words <- as.data.frame(words)                                          # convert to data frame
words$sum <- words$value * words$n                                     # sum sentiment by sentiment value
words <- aggregate(words$sum, by = list(Category = words$thread), FUN = sum)  # sum net sentiment by thread
words$Type <- substr(colnames(dat)[i], 1, 4)                           # add thread type to data frame
words$Year <- as.numeric(paste("20", substr(colnames(dat)[i], 5, 6), sep = ""))  # add year to data frame
colnames(words) <- c("Thread", "Sentiment", "Type", "Year")            # add column names to new data frame
sentdata <- rbind(sentdata, words)
}
write.csv(sentdata, "sentdata.csv", row.names = FALSE)
sentdata <- read.csv("sentdata.csv", header = TRUE)
setwd("~/Documents/GitHub/ecosentiment")
write.csv(sentdata, "sentdata.csv", row.names = FALSE)
